/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <600>;
};

/ {
      combos {
          compatible = "zmk,combos";
          combo_bspc {
              timeout-ms = <50>;
              key-positions = <16 17>;
              bindings = <&kp TAB>;
          };
          combo_spc {
              timeout-ms = <50>;
              key-positions = <12 13>;
              bindings = <&kp SPACE>;
          };

          combo_z {
              timeout-ms = <50>;
              key-positions = <21 22>;
              bindings = <&kp Z>;
          };

          combo_enter {
              timeout-ms = <50>;
              key-positions = <17 18>;
              bindings = <&kp RET>;
          };
      };	

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
                           &lt 3 Q     &kp W        &kp F         &kp P      &kp G       &kp J         &kp L  &kp U       &kp Y       &kp BSPC   
                           &lt 1 A     &mt LCTRL R  &kp S   &mt LGUI T &kp D       &kp H         &kp N  &mt LALT E  &mt RCTRL I &lt 2 O
                           &trans      &mt LSHFT X        &kp C         &kp V      &kp SPACE   &mt RSHFT RET &kp M  &kp B       &mt RSHFT K   &trans
                        >;
                };
                lower_layer {
                        bindings = <
                         &trans  &kp AT &kp HASH  &kp DLLR   &trans   &trans &kp LPAR   &kp RPAR &kp MINUS &kp EQUAL    
                         &trans  &trans &trans    &kp EXCL   &kp ESC  &trans &kp COMMA  &kp DOT  &trans    &kp SEMI
                         &trans  &trans &trans    &kp PRCNT  &trans   &trans &kp STAR      &trans   &trans    &trans 
                        >; 
                }; 

                raise_layer {
                        bindings = <
                         &kp PIPE &kp AMPS  &kp LBKT      &kp RBKT    &trans &trans   &kp LS(LBKT) &kp LS(RBKT) &trans      &trans
                         &trans   &kp CARET &kp GRAVE     &kp SQT     &trans &kp LEFT &kp DOWN     &kp UP       &kp RIGHT   &trans
                         &trans   &trans    &kp RA(COMMA) &kp LS(SQT) &trans &trans   &kp SLASH    &kp BSLH     &trans      &trans 
                       >;
                };

                num_layer {
                        bindings = <
                          &lt 3 Q    &kp Q &kp W &kp E &kp R     &kp J   &kp N7  &kp N8   &kp N9    &out OUT_TOG
                          &kp TAB    &kp A &kp S &kp D &kp F    &kp N0  &kp N4  &kp N5   &kp N6     &bt BT_SEL 0
                          &bt BT_CLR &kp F11 &kp C &kp V  &tog 4      &kp N0  &kp N1  &kp N2   &kp N3 &bt BT_SEL 1
                        >;

                };

                game_layer {
                        bindings = <
                           &kp Q  &kp W  &kp E   &kp R  &kp T   &kp Y &kp U  &kp I      &kp O   &kp P   
                           &kp A  &kp S  &kp D   &kp F  &kp G   &kp H &kp J  &kp K      &kp L   &kp TAB
                           &kp Z  &kp X  &kp C   &kp V  &kp B   &kp N &kp M  &kp COMMA  &kp DOT &tog 4
                        >;
                };
        };
};
